// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.developersbeeh.medcontrol.`data`.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class MealAnalysisResultJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<MealAnalysisResult>() {
  private val options: JsonReader.Options = JsonReader.Options.of("descricao", "calorias",
      "beneficios", "dicas")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "descricao")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "calorias")

  @Volatile
  private var constructorRef: Constructor<MealAnalysisResult>? = null

  public override fun toString(): String = buildString(40) {
      append("GeneratedJsonAdapter(").append("MealAnalysisResult").append(')') }

  public override fun fromJson(reader: JsonReader): MealAnalysisResult {
    var descricao: String? = null
    var calorias: Int? = 0
    var beneficios: String? = null
    var dicas: String? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          descricao = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("descricao",
              "descricao", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          calorias = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("calorias",
              "calorias", reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          beneficios = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("beneficios",
              "beneficios", reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          dicas = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("dicas", "dicas",
              reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xfffffff0.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  MealAnalysisResult(
          descricao = descricao as String,
          calorias = calorias as Int,
          beneficios = beneficios as String,
          dicas = dicas as String
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<MealAnalysisResult> = this.constructorRef ?:
          MealAnalysisResult::class.java.getDeclaredConstructor(String::class.java,
          Int::class.javaPrimitiveType, String::class.java, String::class.java,
          Int::class.javaPrimitiveType, Util.DEFAULT_CONSTRUCTOR_MARKER).also {
          this.constructorRef = it }
      return localConstructor.newInstance(
          descricao,
          calorias,
          beneficios,
          dicas,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: MealAnalysisResult?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("descricao")
    stringAdapter.toJson(writer, value_.descricao)
    writer.name("calorias")
    intAdapter.toJson(writer, value_.calorias)
    writer.name("beneficios")
    stringAdapter.toJson(writer, value_.beneficios)
    writer.name("dicas")
    stringAdapter.toJson(writer, value_.dicas)
    writer.endObject()
  }
}

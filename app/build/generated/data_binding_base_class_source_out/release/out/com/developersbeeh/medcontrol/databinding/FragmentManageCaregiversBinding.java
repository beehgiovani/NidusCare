// Generated by view binder compiler. Do not edit!
package com.developersbeeh.medcontrol.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.developersbeeh.medcontrol.R;
import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentManageCaregiversBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final View dividerInvites;

  @NonNull
  public final LinearLayout emptyStateReceivedInvites;

  @NonNull
  public final ExtendedFloatingActionButton fabInviteCaregiver;

  @NonNull
  public final LinearLayout layoutManageCaregivers;

  @NonNull
  public final RecyclerView recyclerViewCurrentCaregivers;

  @NonNull
  public final RecyclerView recyclerViewPendingInvites;

  @NonNull
  public final RecyclerView recyclerViewReceivedInvites;

  @NonNull
  public final TextView textViewNoPendingInvites;

  @NonNull
  public final TextView textViewReceivedInvitesTitle;

  private FragmentManageCaregiversBinding(@NonNull CoordinatorLayout rootView,
      @NonNull View dividerInvites, @NonNull LinearLayout emptyStateReceivedInvites,
      @NonNull ExtendedFloatingActionButton fabInviteCaregiver,
      @NonNull LinearLayout layoutManageCaregivers,
      @NonNull RecyclerView recyclerViewCurrentCaregivers,
      @NonNull RecyclerView recyclerViewPendingInvites,
      @NonNull RecyclerView recyclerViewReceivedInvites, @NonNull TextView textViewNoPendingInvites,
      @NonNull TextView textViewReceivedInvitesTitle) {
    this.rootView = rootView;
    this.dividerInvites = dividerInvites;
    this.emptyStateReceivedInvites = emptyStateReceivedInvites;
    this.fabInviteCaregiver = fabInviteCaregiver;
    this.layoutManageCaregivers = layoutManageCaregivers;
    this.recyclerViewCurrentCaregivers = recyclerViewCurrentCaregivers;
    this.recyclerViewPendingInvites = recyclerViewPendingInvites;
    this.recyclerViewReceivedInvites = recyclerViewReceivedInvites;
    this.textViewNoPendingInvites = textViewNoPendingInvites;
    this.textViewReceivedInvitesTitle = textViewReceivedInvitesTitle;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentManageCaregiversBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentManageCaregiversBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_manage_caregivers, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentManageCaregiversBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.dividerInvites;
      View dividerInvites = ViewBindings.findChildViewById(rootView, id);
      if (dividerInvites == null) {
        break missingId;
      }

      id = R.id.emptyStateReceivedInvites;
      LinearLayout emptyStateReceivedInvites = ViewBindings.findChildViewById(rootView, id);
      if (emptyStateReceivedInvites == null) {
        break missingId;
      }

      id = R.id.fabInviteCaregiver;
      ExtendedFloatingActionButton fabInviteCaregiver = ViewBindings.findChildViewById(rootView, id);
      if (fabInviteCaregiver == null) {
        break missingId;
      }

      id = R.id.layoutManageCaregivers;
      LinearLayout layoutManageCaregivers = ViewBindings.findChildViewById(rootView, id);
      if (layoutManageCaregivers == null) {
        break missingId;
      }

      id = R.id.recyclerViewCurrentCaregivers;
      RecyclerView recyclerViewCurrentCaregivers = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewCurrentCaregivers == null) {
        break missingId;
      }

      id = R.id.recyclerViewPendingInvites;
      RecyclerView recyclerViewPendingInvites = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewPendingInvites == null) {
        break missingId;
      }

      id = R.id.recyclerViewReceivedInvites;
      RecyclerView recyclerViewReceivedInvites = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewReceivedInvites == null) {
        break missingId;
      }

      id = R.id.textViewNoPendingInvites;
      TextView textViewNoPendingInvites = ViewBindings.findChildViewById(rootView, id);
      if (textViewNoPendingInvites == null) {
        break missingId;
      }

      id = R.id.textViewReceivedInvitesTitle;
      TextView textViewReceivedInvitesTitle = ViewBindings.findChildViewById(rootView, id);
      if (textViewReceivedInvitesTitle == null) {
        break missingId;
      }

      return new FragmentManageCaregiversBinding((CoordinatorLayout) rootView, dividerInvites,
          emptyStateReceivedInvites, fabInviteCaregiver, layoutManageCaregivers,
          recyclerViewCurrentCaregivers, recyclerViewPendingInvites, recyclerViewReceivedInvites,
          textViewNoPendingInvites, textViewReceivedInvitesTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

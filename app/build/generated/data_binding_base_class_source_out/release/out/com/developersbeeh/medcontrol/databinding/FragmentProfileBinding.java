// Generated by view binder compiler. Do not edit!
package com.developersbeeh.medcontrol.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.developersbeeh.medcontrol.R;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.imageview.ShapeableImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentProfileBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final MaterialCardView cardChangePassword;

  @NonNull
  public final MaterialCardView cardDeleteAccount;

  @NonNull
  public final MaterialCardView cardEditProfile;

  @NonNull
  public final MaterialCardView cardManageDependents;

  @NonNull
  public final MaterialCardView cardMyHealthData;

  @NonNull
  public final ShapeableImageView imageViewUserProfilePhoto;

  @NonNull
  public final ItemSettingBinding layoutChangePassword;

  @NonNull
  public final ItemSettingBinding layoutDeleteAccount;

  @NonNull
  public final ItemSettingBinding layoutEditProfile;

  @NonNull
  public final ItemSettingBinding layoutManageDependents;

  @NonNull
  public final ItemSettingBinding layoutMyHealthData;

  @NonNull
  public final LinearLayout settingsContainer;

  @NonNull
  public final TextView textViewPremiumStatus;

  @NonNull
  public final TextView textViewUserEmail;

  @NonNull
  public final TextView textViewUserName;

  private FragmentProfileBinding(@NonNull NestedScrollView rootView,
      @NonNull MaterialCardView cardChangePassword, @NonNull MaterialCardView cardDeleteAccount,
      @NonNull MaterialCardView cardEditProfile, @NonNull MaterialCardView cardManageDependents,
      @NonNull MaterialCardView cardMyHealthData,
      @NonNull ShapeableImageView imageViewUserProfilePhoto,
      @NonNull ItemSettingBinding layoutChangePassword,
      @NonNull ItemSettingBinding layoutDeleteAccount,
      @NonNull ItemSettingBinding layoutEditProfile,
      @NonNull ItemSettingBinding layoutManageDependents,
      @NonNull ItemSettingBinding layoutMyHealthData, @NonNull LinearLayout settingsContainer,
      @NonNull TextView textViewPremiumStatus, @NonNull TextView textViewUserEmail,
      @NonNull TextView textViewUserName) {
    this.rootView = rootView;
    this.cardChangePassword = cardChangePassword;
    this.cardDeleteAccount = cardDeleteAccount;
    this.cardEditProfile = cardEditProfile;
    this.cardManageDependents = cardManageDependents;
    this.cardMyHealthData = cardMyHealthData;
    this.imageViewUserProfilePhoto = imageViewUserProfilePhoto;
    this.layoutChangePassword = layoutChangePassword;
    this.layoutDeleteAccount = layoutDeleteAccount;
    this.layoutEditProfile = layoutEditProfile;
    this.layoutManageDependents = layoutManageDependents;
    this.layoutMyHealthData = layoutMyHealthData;
    this.settingsContainer = settingsContainer;
    this.textViewPremiumStatus = textViewPremiumStatus;
    this.textViewUserEmail = textViewUserEmail;
    this.textViewUserName = textViewUserName;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentProfileBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentProfileBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_profile, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentProfileBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cardChangePassword;
      MaterialCardView cardChangePassword = ViewBindings.findChildViewById(rootView, id);
      if (cardChangePassword == null) {
        break missingId;
      }

      id = R.id.cardDeleteAccount;
      MaterialCardView cardDeleteAccount = ViewBindings.findChildViewById(rootView, id);
      if (cardDeleteAccount == null) {
        break missingId;
      }

      id = R.id.cardEditProfile;
      MaterialCardView cardEditProfile = ViewBindings.findChildViewById(rootView, id);
      if (cardEditProfile == null) {
        break missingId;
      }

      id = R.id.cardManageDependents;
      MaterialCardView cardManageDependents = ViewBindings.findChildViewById(rootView, id);
      if (cardManageDependents == null) {
        break missingId;
      }

      id = R.id.cardMyHealthData;
      MaterialCardView cardMyHealthData = ViewBindings.findChildViewById(rootView, id);
      if (cardMyHealthData == null) {
        break missingId;
      }

      id = R.id.imageViewUserProfilePhoto;
      ShapeableImageView imageViewUserProfilePhoto = ViewBindings.findChildViewById(rootView, id);
      if (imageViewUserProfilePhoto == null) {
        break missingId;
      }

      id = R.id.layoutChangePassword;
      View layoutChangePassword = ViewBindings.findChildViewById(rootView, id);
      if (layoutChangePassword == null) {
        break missingId;
      }
      ItemSettingBinding binding_layoutChangePassword = ItemSettingBinding.bind(layoutChangePassword);

      id = R.id.layoutDeleteAccount;
      View layoutDeleteAccount = ViewBindings.findChildViewById(rootView, id);
      if (layoutDeleteAccount == null) {
        break missingId;
      }
      ItemSettingBinding binding_layoutDeleteAccount = ItemSettingBinding.bind(layoutDeleteAccount);

      id = R.id.layoutEditProfile;
      View layoutEditProfile = ViewBindings.findChildViewById(rootView, id);
      if (layoutEditProfile == null) {
        break missingId;
      }
      ItemSettingBinding binding_layoutEditProfile = ItemSettingBinding.bind(layoutEditProfile);

      id = R.id.layoutManageDependents;
      View layoutManageDependents = ViewBindings.findChildViewById(rootView, id);
      if (layoutManageDependents == null) {
        break missingId;
      }
      ItemSettingBinding binding_layoutManageDependents = ItemSettingBinding.bind(layoutManageDependents);

      id = R.id.layoutMyHealthData;
      View layoutMyHealthData = ViewBindings.findChildViewById(rootView, id);
      if (layoutMyHealthData == null) {
        break missingId;
      }
      ItemSettingBinding binding_layoutMyHealthData = ItemSettingBinding.bind(layoutMyHealthData);

      id = R.id.settings_container;
      LinearLayout settingsContainer = ViewBindings.findChildViewById(rootView, id);
      if (settingsContainer == null) {
        break missingId;
      }

      id = R.id.textViewPremiumStatus;
      TextView textViewPremiumStatus = ViewBindings.findChildViewById(rootView, id);
      if (textViewPremiumStatus == null) {
        break missingId;
      }

      id = R.id.textViewUserEmail;
      TextView textViewUserEmail = ViewBindings.findChildViewById(rootView, id);
      if (textViewUserEmail == null) {
        break missingId;
      }

      id = R.id.textViewUserName;
      TextView textViewUserName = ViewBindings.findChildViewById(rootView, id);
      if (textViewUserName == null) {
        break missingId;
      }

      return new FragmentProfileBinding((NestedScrollView) rootView, cardChangePassword,
          cardDeleteAccount, cardEditProfile, cardManageDependents, cardMyHealthData,
          imageViewUserProfilePhoto, binding_layoutChangePassword, binding_layoutDeleteAccount,
          binding_layoutEditProfile, binding_layoutManageDependents, binding_layoutMyHealthData,
          settingsContainer, textViewPremiumStatus, textViewUserEmail, textViewUserName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

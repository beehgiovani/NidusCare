// Generated by view binder compiler. Do not edit!
package com.developersbeeh.medcontrol.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.developersbeeh.medcontrol.R;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.kizitonwose.calendar.view.CalendarView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentCycleTrackerBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageButton buttonHistory;

  @NonNull
  public final FloatingActionButton buttonLogToday;

  @NonNull
  public final ImageButton buttonNextMonth;

  @NonNull
  public final ImageButton buttonPreviousMonth;

  @NonNull
  public final CalendarView calendarView;

  @NonNull
  public final MaterialCardView cardHeader;

  @NonNull
  public final MaterialCardView detailsCard;

  @NonNull
  public final TextView labelActivity;

  @NonNull
  public final TextView labelFlow;

  @NonNull
  public final TextView labelMood;

  @NonNull
  public final TextView labelNotes;

  @NonNull
  public final TextView labelSymptoms;

  @NonNull
  public final LinearLayout legendContainer;

  @NonNull
  public final TextView textViewCurrentPhase;

  @NonNull
  public final TextView textViewDetailsActivity;

  @NonNull
  public final TextView textViewDetailsDate;

  @NonNull
  public final TextView textViewDetailsFlow;

  @NonNull
  public final TextView textViewDetailsMood;

  @NonNull
  public final TextView textViewDetailsNotes;

  @NonNull
  public final TextView textViewDetailsSymptoms;

  @NonNull
  public final TextView textViewDetailsTitle;

  @NonNull
  public final TextView textViewMonthYear;

  @NonNull
  public final TextView textViewPrediction;

  @NonNull
  public final LinearLayout weekDaysHeader;

  private FragmentCycleTrackerBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageButton buttonHistory, @NonNull FloatingActionButton buttonLogToday,
      @NonNull ImageButton buttonNextMonth, @NonNull ImageButton buttonPreviousMonth,
      @NonNull CalendarView calendarView, @NonNull MaterialCardView cardHeader,
      @NonNull MaterialCardView detailsCard, @NonNull TextView labelActivity,
      @NonNull TextView labelFlow, @NonNull TextView labelMood, @NonNull TextView labelNotes,
      @NonNull TextView labelSymptoms, @NonNull LinearLayout legendContainer,
      @NonNull TextView textViewCurrentPhase, @NonNull TextView textViewDetailsActivity,
      @NonNull TextView textViewDetailsDate, @NonNull TextView textViewDetailsFlow,
      @NonNull TextView textViewDetailsMood, @NonNull TextView textViewDetailsNotes,
      @NonNull TextView textViewDetailsSymptoms, @NonNull TextView textViewDetailsTitle,
      @NonNull TextView textViewMonthYear, @NonNull TextView textViewPrediction,
      @NonNull LinearLayout weekDaysHeader) {
    this.rootView = rootView;
    this.buttonHistory = buttonHistory;
    this.buttonLogToday = buttonLogToday;
    this.buttonNextMonth = buttonNextMonth;
    this.buttonPreviousMonth = buttonPreviousMonth;
    this.calendarView = calendarView;
    this.cardHeader = cardHeader;
    this.detailsCard = detailsCard;
    this.labelActivity = labelActivity;
    this.labelFlow = labelFlow;
    this.labelMood = labelMood;
    this.labelNotes = labelNotes;
    this.labelSymptoms = labelSymptoms;
    this.legendContainer = legendContainer;
    this.textViewCurrentPhase = textViewCurrentPhase;
    this.textViewDetailsActivity = textViewDetailsActivity;
    this.textViewDetailsDate = textViewDetailsDate;
    this.textViewDetailsFlow = textViewDetailsFlow;
    this.textViewDetailsMood = textViewDetailsMood;
    this.textViewDetailsNotes = textViewDetailsNotes;
    this.textViewDetailsSymptoms = textViewDetailsSymptoms;
    this.textViewDetailsTitle = textViewDetailsTitle;
    this.textViewMonthYear = textViewMonthYear;
    this.textViewPrediction = textViewPrediction;
    this.weekDaysHeader = weekDaysHeader;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentCycleTrackerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentCycleTrackerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_cycle_tracker, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentCycleTrackerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonHistory;
      ImageButton buttonHistory = ViewBindings.findChildViewById(rootView, id);
      if (buttonHistory == null) {
        break missingId;
      }

      id = R.id.buttonLogToday;
      FloatingActionButton buttonLogToday = ViewBindings.findChildViewById(rootView, id);
      if (buttonLogToday == null) {
        break missingId;
      }

      id = R.id.buttonNextMonth;
      ImageButton buttonNextMonth = ViewBindings.findChildViewById(rootView, id);
      if (buttonNextMonth == null) {
        break missingId;
      }

      id = R.id.buttonPreviousMonth;
      ImageButton buttonPreviousMonth = ViewBindings.findChildViewById(rootView, id);
      if (buttonPreviousMonth == null) {
        break missingId;
      }

      id = R.id.calendarView;
      CalendarView calendarView = ViewBindings.findChildViewById(rootView, id);
      if (calendarView == null) {
        break missingId;
      }

      id = R.id.cardHeader;
      MaterialCardView cardHeader = ViewBindings.findChildViewById(rootView, id);
      if (cardHeader == null) {
        break missingId;
      }

      id = R.id.detailsCard;
      MaterialCardView detailsCard = ViewBindings.findChildViewById(rootView, id);
      if (detailsCard == null) {
        break missingId;
      }

      id = R.id.labelActivity;
      TextView labelActivity = ViewBindings.findChildViewById(rootView, id);
      if (labelActivity == null) {
        break missingId;
      }

      id = R.id.labelFlow;
      TextView labelFlow = ViewBindings.findChildViewById(rootView, id);
      if (labelFlow == null) {
        break missingId;
      }

      id = R.id.labelMood;
      TextView labelMood = ViewBindings.findChildViewById(rootView, id);
      if (labelMood == null) {
        break missingId;
      }

      id = R.id.labelNotes;
      TextView labelNotes = ViewBindings.findChildViewById(rootView, id);
      if (labelNotes == null) {
        break missingId;
      }

      id = R.id.labelSymptoms;
      TextView labelSymptoms = ViewBindings.findChildViewById(rootView, id);
      if (labelSymptoms == null) {
        break missingId;
      }

      id = R.id.legendContainer;
      LinearLayout legendContainer = ViewBindings.findChildViewById(rootView, id);
      if (legendContainer == null) {
        break missingId;
      }

      id = R.id.textViewCurrentPhase;
      TextView textViewCurrentPhase = ViewBindings.findChildViewById(rootView, id);
      if (textViewCurrentPhase == null) {
        break missingId;
      }

      id = R.id.textViewDetailsActivity;
      TextView textViewDetailsActivity = ViewBindings.findChildViewById(rootView, id);
      if (textViewDetailsActivity == null) {
        break missingId;
      }

      id = R.id.textViewDetailsDate;
      TextView textViewDetailsDate = ViewBindings.findChildViewById(rootView, id);
      if (textViewDetailsDate == null) {
        break missingId;
      }

      id = R.id.textViewDetailsFlow;
      TextView textViewDetailsFlow = ViewBindings.findChildViewById(rootView, id);
      if (textViewDetailsFlow == null) {
        break missingId;
      }

      id = R.id.textViewDetailsMood;
      TextView textViewDetailsMood = ViewBindings.findChildViewById(rootView, id);
      if (textViewDetailsMood == null) {
        break missingId;
      }

      id = R.id.textViewDetailsNotes;
      TextView textViewDetailsNotes = ViewBindings.findChildViewById(rootView, id);
      if (textViewDetailsNotes == null) {
        break missingId;
      }

      id = R.id.textViewDetailsSymptoms;
      TextView textViewDetailsSymptoms = ViewBindings.findChildViewById(rootView, id);
      if (textViewDetailsSymptoms == null) {
        break missingId;
      }

      id = R.id.textViewDetailsTitle;
      TextView textViewDetailsTitle = ViewBindings.findChildViewById(rootView, id);
      if (textViewDetailsTitle == null) {
        break missingId;
      }

      id = R.id.textViewMonthYear;
      TextView textViewMonthYear = ViewBindings.findChildViewById(rootView, id);
      if (textViewMonthYear == null) {
        break missingId;
      }

      id = R.id.textViewPrediction;
      TextView textViewPrediction = ViewBindings.findChildViewById(rootView, id);
      if (textViewPrediction == null) {
        break missingId;
      }

      id = R.id.weekDaysHeader;
      LinearLayout weekDaysHeader = ViewBindings.findChildViewById(rootView, id);
      if (weekDaysHeader == null) {
        break missingId;
      }

      return new FragmentCycleTrackerBinding((ConstraintLayout) rootView, buttonHistory,
          buttonLogToday, buttonNextMonth, buttonPreviousMonth, calendarView, cardHeader,
          detailsCard, labelActivity, labelFlow, labelMood, labelNotes, labelSymptoms,
          legendContainer, textViewCurrentPhase, textViewDetailsActivity, textViewDetailsDate,
          textViewDetailsFlow, textViewDetailsMood, textViewDetailsNotes, textViewDetailsSymptoms,
          textViewDetailsTitle, textViewMonthYear, textViewPrediction, weekDaysHeader);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

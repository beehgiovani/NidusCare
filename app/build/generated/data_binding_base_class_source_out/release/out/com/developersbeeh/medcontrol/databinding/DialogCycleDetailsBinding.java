// Generated by view binder compiler. Do not edit!
package com.developersbeeh.medcontrol.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.ScrollView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.developersbeeh.medcontrol.R;
import com.google.android.material.materialswitch.MaterialSwitch;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogCycleDetailsBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final TextInputEditText editTextBasalTemperature;

  @NonNull
  public final TextInputEditText editTextNotes;

  @NonNull
  public final RadioButton radioFlowIntense;

  @NonNull
  public final RadioButton radioFlowLight;

  @NonNull
  public final RadioButton radioFlowMedium;

  @NonNull
  public final RadioGroup radioGroupFlow;

  @NonNull
  public final RadioGroup radioGroupMucus;

  @NonNull
  public final RadioButton radioMucusCreamy;

  @NonNull
  public final RadioButton radioMucusDry;

  @NonNull
  public final RadioButton radioMucusEggWhite;

  @NonNull
  public final MaterialSwitch switchProtectedSex;

  @NonNull
  public final MaterialSwitch switchSexualActivity;

  @NonNull
  public final TextInputLayout tilBasalTemperature;

  @NonNull
  public final TextInputLayout tilNotes;

  private DialogCycleDetailsBinding(@NonNull ScrollView rootView,
      @NonNull TextInputEditText editTextBasalTemperature, @NonNull TextInputEditText editTextNotes,
      @NonNull RadioButton radioFlowIntense, @NonNull RadioButton radioFlowLight,
      @NonNull RadioButton radioFlowMedium, @NonNull RadioGroup radioGroupFlow,
      @NonNull RadioGroup radioGroupMucus, @NonNull RadioButton radioMucusCreamy,
      @NonNull RadioButton radioMucusDry, @NonNull RadioButton radioMucusEggWhite,
      @NonNull MaterialSwitch switchProtectedSex, @NonNull MaterialSwitch switchSexualActivity,
      @NonNull TextInputLayout tilBasalTemperature, @NonNull TextInputLayout tilNotes) {
    this.rootView = rootView;
    this.editTextBasalTemperature = editTextBasalTemperature;
    this.editTextNotes = editTextNotes;
    this.radioFlowIntense = radioFlowIntense;
    this.radioFlowLight = radioFlowLight;
    this.radioFlowMedium = radioFlowMedium;
    this.radioGroupFlow = radioGroupFlow;
    this.radioGroupMucus = radioGroupMucus;
    this.radioMucusCreamy = radioMucusCreamy;
    this.radioMucusDry = radioMucusDry;
    this.radioMucusEggWhite = radioMucusEggWhite;
    this.switchProtectedSex = switchProtectedSex;
    this.switchSexualActivity = switchSexualActivity;
    this.tilBasalTemperature = tilBasalTemperature;
    this.tilNotes = tilNotes;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogCycleDetailsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogCycleDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_cycle_details, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogCycleDetailsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.editTextBasalTemperature;
      TextInputEditText editTextBasalTemperature = ViewBindings.findChildViewById(rootView, id);
      if (editTextBasalTemperature == null) {
        break missingId;
      }

      id = R.id.editTextNotes;
      TextInputEditText editTextNotes = ViewBindings.findChildViewById(rootView, id);
      if (editTextNotes == null) {
        break missingId;
      }

      id = R.id.radioFlowIntense;
      RadioButton radioFlowIntense = ViewBindings.findChildViewById(rootView, id);
      if (radioFlowIntense == null) {
        break missingId;
      }

      id = R.id.radioFlowLight;
      RadioButton radioFlowLight = ViewBindings.findChildViewById(rootView, id);
      if (radioFlowLight == null) {
        break missingId;
      }

      id = R.id.radioFlowMedium;
      RadioButton radioFlowMedium = ViewBindings.findChildViewById(rootView, id);
      if (radioFlowMedium == null) {
        break missingId;
      }

      id = R.id.radioGroupFlow;
      RadioGroup radioGroupFlow = ViewBindings.findChildViewById(rootView, id);
      if (radioGroupFlow == null) {
        break missingId;
      }

      id = R.id.radioGroupMucus;
      RadioGroup radioGroupMucus = ViewBindings.findChildViewById(rootView, id);
      if (radioGroupMucus == null) {
        break missingId;
      }

      id = R.id.radioMucusCreamy;
      RadioButton radioMucusCreamy = ViewBindings.findChildViewById(rootView, id);
      if (radioMucusCreamy == null) {
        break missingId;
      }

      id = R.id.radioMucusDry;
      RadioButton radioMucusDry = ViewBindings.findChildViewById(rootView, id);
      if (radioMucusDry == null) {
        break missingId;
      }

      id = R.id.radioMucusEggWhite;
      RadioButton radioMucusEggWhite = ViewBindings.findChildViewById(rootView, id);
      if (radioMucusEggWhite == null) {
        break missingId;
      }

      id = R.id.switchProtectedSex;
      MaterialSwitch switchProtectedSex = ViewBindings.findChildViewById(rootView, id);
      if (switchProtectedSex == null) {
        break missingId;
      }

      id = R.id.switchSexualActivity;
      MaterialSwitch switchSexualActivity = ViewBindings.findChildViewById(rootView, id);
      if (switchSexualActivity == null) {
        break missingId;
      }

      id = R.id.tilBasalTemperature;
      TextInputLayout tilBasalTemperature = ViewBindings.findChildViewById(rootView, id);
      if (tilBasalTemperature == null) {
        break missingId;
      }

      id = R.id.tilNotes;
      TextInputLayout tilNotes = ViewBindings.findChildViewById(rootView, id);
      if (tilNotes == null) {
        break missingId;
      }

      return new DialogCycleDetailsBinding((ScrollView) rootView, editTextBasalTemperature,
          editTextNotes, radioFlowIntense, radioFlowLight, radioFlowMedium, radioGroupFlow,
          radioGroupMucus, radioMucusCreamy, radioMucusDry, radioMucusEggWhite, switchProtectedSex,
          switchSexualActivity, tilBasalTemperature, tilNotes);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

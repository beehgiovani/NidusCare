// Generated by view binder compiler. Do not edit!
package com.developersbeeh.medcontrol.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.developersbeeh.medcontrol.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogAddSleepBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final MaterialButton buttonAddInterruption;

  @NonNull
  public final MaterialButton buttonRemoveInterruption;

  @NonNull
  public final MaterialButton buttonSuggestTime;

  @NonNull
  public final ChipGroup chipGroupSleepQuality;

  @NonNull
  public final Chip chipQualityBad;

  @NonNull
  public final Chip chipQualityGood;

  @NonNull
  public final Chip chipQualityOk;

  @NonNull
  public final ScrollView dialogAddSleepRoot;

  @NonNull
  public final TextInputEditText editTextBedtime;

  @NonNull
  public final TextInputEditText editTextNotes;

  @NonNull
  public final TextInputEditText editTextWakeUp;

  @NonNull
  public final TextView textViewInterruptionsCount;

  @NonNull
  public final TextView textViewInterruptionsLabel;

  @NonNull
  public final TextInputLayout tilBedtime;

  @NonNull
  public final TextInputLayout tilNotes;

  @NonNull
  public final TextInputLayout tilWakeUp;

  private DialogAddSleepBinding(@NonNull ScrollView rootView,
      @NonNull MaterialButton buttonAddInterruption,
      @NonNull MaterialButton buttonRemoveInterruption, @NonNull MaterialButton buttonSuggestTime,
      @NonNull ChipGroup chipGroupSleepQuality, @NonNull Chip chipQualityBad,
      @NonNull Chip chipQualityGood, @NonNull Chip chipQualityOk,
      @NonNull ScrollView dialogAddSleepRoot, @NonNull TextInputEditText editTextBedtime,
      @NonNull TextInputEditText editTextNotes, @NonNull TextInputEditText editTextWakeUp,
      @NonNull TextView textViewInterruptionsCount, @NonNull TextView textViewInterruptionsLabel,
      @NonNull TextInputLayout tilBedtime, @NonNull TextInputLayout tilNotes,
      @NonNull TextInputLayout tilWakeUp) {
    this.rootView = rootView;
    this.buttonAddInterruption = buttonAddInterruption;
    this.buttonRemoveInterruption = buttonRemoveInterruption;
    this.buttonSuggestTime = buttonSuggestTime;
    this.chipGroupSleepQuality = chipGroupSleepQuality;
    this.chipQualityBad = chipQualityBad;
    this.chipQualityGood = chipQualityGood;
    this.chipQualityOk = chipQualityOk;
    this.dialogAddSleepRoot = dialogAddSleepRoot;
    this.editTextBedtime = editTextBedtime;
    this.editTextNotes = editTextNotes;
    this.editTextWakeUp = editTextWakeUp;
    this.textViewInterruptionsCount = textViewInterruptionsCount;
    this.textViewInterruptionsLabel = textViewInterruptionsLabel;
    this.tilBedtime = tilBedtime;
    this.tilNotes = tilNotes;
    this.tilWakeUp = tilWakeUp;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogAddSleepBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogAddSleepBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_add_sleep, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogAddSleepBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonAddInterruption;
      MaterialButton buttonAddInterruption = ViewBindings.findChildViewById(rootView, id);
      if (buttonAddInterruption == null) {
        break missingId;
      }

      id = R.id.buttonRemoveInterruption;
      MaterialButton buttonRemoveInterruption = ViewBindings.findChildViewById(rootView, id);
      if (buttonRemoveInterruption == null) {
        break missingId;
      }

      id = R.id.buttonSuggestTime;
      MaterialButton buttonSuggestTime = ViewBindings.findChildViewById(rootView, id);
      if (buttonSuggestTime == null) {
        break missingId;
      }

      id = R.id.chipGroupSleepQuality;
      ChipGroup chipGroupSleepQuality = ViewBindings.findChildViewById(rootView, id);
      if (chipGroupSleepQuality == null) {
        break missingId;
      }

      id = R.id.chipQualityBad;
      Chip chipQualityBad = ViewBindings.findChildViewById(rootView, id);
      if (chipQualityBad == null) {
        break missingId;
      }

      id = R.id.chipQualityGood;
      Chip chipQualityGood = ViewBindings.findChildViewById(rootView, id);
      if (chipQualityGood == null) {
        break missingId;
      }

      id = R.id.chipQualityOk;
      Chip chipQualityOk = ViewBindings.findChildViewById(rootView, id);
      if (chipQualityOk == null) {
        break missingId;
      }

      ScrollView dialogAddSleepRoot = (ScrollView) rootView;

      id = R.id.editTextBedtime;
      TextInputEditText editTextBedtime = ViewBindings.findChildViewById(rootView, id);
      if (editTextBedtime == null) {
        break missingId;
      }

      id = R.id.editTextNotes;
      TextInputEditText editTextNotes = ViewBindings.findChildViewById(rootView, id);
      if (editTextNotes == null) {
        break missingId;
      }

      id = R.id.editTextWakeUp;
      TextInputEditText editTextWakeUp = ViewBindings.findChildViewById(rootView, id);
      if (editTextWakeUp == null) {
        break missingId;
      }

      id = R.id.textViewInterruptionsCount;
      TextView textViewInterruptionsCount = ViewBindings.findChildViewById(rootView, id);
      if (textViewInterruptionsCount == null) {
        break missingId;
      }

      id = R.id.textViewInterruptionsLabel;
      TextView textViewInterruptionsLabel = ViewBindings.findChildViewById(rootView, id);
      if (textViewInterruptionsLabel == null) {
        break missingId;
      }

      id = R.id.tilBedtime;
      TextInputLayout tilBedtime = ViewBindings.findChildViewById(rootView, id);
      if (tilBedtime == null) {
        break missingId;
      }

      id = R.id.tilNotes;
      TextInputLayout tilNotes = ViewBindings.findChildViewById(rootView, id);
      if (tilNotes == null) {
        break missingId;
      }

      id = R.id.tilWakeUp;
      TextInputLayout tilWakeUp = ViewBindings.findChildViewById(rootView, id);
      if (tilWakeUp == null) {
        break missingId;
      }

      return new DialogAddSleepBinding((ScrollView) rootView, buttonAddInterruption,
          buttonRemoveInterruption, buttonSuggestTime, chipGroupSleepQuality, chipQualityBad,
          chipQualityGood, chipQualityOk, dialogAddSleepRoot, editTextBedtime, editTextNotes,
          editTextWakeUp, textViewInterruptionsCount, textViewInterruptionsLabel, tilBedtime,
          tilNotes, tilWakeUp);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

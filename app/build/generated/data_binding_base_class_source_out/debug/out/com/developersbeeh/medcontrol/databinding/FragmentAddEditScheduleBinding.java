// Generated by view binder compiler. Do not edit!
package com.developersbeeh.medcontrol.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import android.widget.ProgressBar;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.developersbeeh.medcontrol.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentAddEditScheduleBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final AutoCompleteTextView autoCompleteScheduleType;

  @NonNull
  public final MaterialButton buttonCancel;

  @NonNull
  public final MaterialButton buttonSave;

  @NonNull
  public final ChipGroup chipGroupReminders;

  @NonNull
  public final TextInputEditText editTextLocation;

  @NonNull
  public final TextInputEditText editTextNotes;

  @NonNull
  public final TextInputEditText editTextProfessional;

  @NonNull
  public final TextInputEditText editTextScheduleDate;

  @NonNull
  public final TextInputEditText editTextScheduleTime;

  @NonNull
  public final TextInputEditText editTextScheduleTitle;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final TextView textViewTitle;

  @NonNull
  public final TextInputLayout tilScheduleDate;

  @NonNull
  public final TextInputLayout tilScheduleTime;

  @NonNull
  public final TextInputLayout tilScheduleTitle;

  @NonNull
  public final TextInputLayout tilScheduleType;

  private FragmentAddEditScheduleBinding(@NonNull ScrollView rootView,
      @NonNull AutoCompleteTextView autoCompleteScheduleType, @NonNull MaterialButton buttonCancel,
      @NonNull MaterialButton buttonSave, @NonNull ChipGroup chipGroupReminders,
      @NonNull TextInputEditText editTextLocation, @NonNull TextInputEditText editTextNotes,
      @NonNull TextInputEditText editTextProfessional,
      @NonNull TextInputEditText editTextScheduleDate,
      @NonNull TextInputEditText editTextScheduleTime,
      @NonNull TextInputEditText editTextScheduleTitle, @NonNull ProgressBar progressBar,
      @NonNull TextView textViewTitle, @NonNull TextInputLayout tilScheduleDate,
      @NonNull TextInputLayout tilScheduleTime, @NonNull TextInputLayout tilScheduleTitle,
      @NonNull TextInputLayout tilScheduleType) {
    this.rootView = rootView;
    this.autoCompleteScheduleType = autoCompleteScheduleType;
    this.buttonCancel = buttonCancel;
    this.buttonSave = buttonSave;
    this.chipGroupReminders = chipGroupReminders;
    this.editTextLocation = editTextLocation;
    this.editTextNotes = editTextNotes;
    this.editTextProfessional = editTextProfessional;
    this.editTextScheduleDate = editTextScheduleDate;
    this.editTextScheduleTime = editTextScheduleTime;
    this.editTextScheduleTitle = editTextScheduleTitle;
    this.progressBar = progressBar;
    this.textViewTitle = textViewTitle;
    this.tilScheduleDate = tilScheduleDate;
    this.tilScheduleTime = tilScheduleTime;
    this.tilScheduleTitle = tilScheduleTitle;
    this.tilScheduleType = tilScheduleType;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAddEditScheduleBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAddEditScheduleBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_add_edit_schedule, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAddEditScheduleBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.autoCompleteScheduleType;
      AutoCompleteTextView autoCompleteScheduleType = ViewBindings.findChildViewById(rootView, id);
      if (autoCompleteScheduleType == null) {
        break missingId;
      }

      id = R.id.buttonCancel;
      MaterialButton buttonCancel = ViewBindings.findChildViewById(rootView, id);
      if (buttonCancel == null) {
        break missingId;
      }

      id = R.id.buttonSave;
      MaterialButton buttonSave = ViewBindings.findChildViewById(rootView, id);
      if (buttonSave == null) {
        break missingId;
      }

      id = R.id.chipGroupReminders;
      ChipGroup chipGroupReminders = ViewBindings.findChildViewById(rootView, id);
      if (chipGroupReminders == null) {
        break missingId;
      }

      id = R.id.editTextLocation;
      TextInputEditText editTextLocation = ViewBindings.findChildViewById(rootView, id);
      if (editTextLocation == null) {
        break missingId;
      }

      id = R.id.editTextNotes;
      TextInputEditText editTextNotes = ViewBindings.findChildViewById(rootView, id);
      if (editTextNotes == null) {
        break missingId;
      }

      id = R.id.editTextProfessional;
      TextInputEditText editTextProfessional = ViewBindings.findChildViewById(rootView, id);
      if (editTextProfessional == null) {
        break missingId;
      }

      id = R.id.editTextScheduleDate;
      TextInputEditText editTextScheduleDate = ViewBindings.findChildViewById(rootView, id);
      if (editTextScheduleDate == null) {
        break missingId;
      }

      id = R.id.editTextScheduleTime;
      TextInputEditText editTextScheduleTime = ViewBindings.findChildViewById(rootView, id);
      if (editTextScheduleTime == null) {
        break missingId;
      }

      id = R.id.editTextScheduleTitle;
      TextInputEditText editTextScheduleTitle = ViewBindings.findChildViewById(rootView, id);
      if (editTextScheduleTitle == null) {
        break missingId;
      }

      id = R.id.progressBar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.textViewTitle;
      TextView textViewTitle = ViewBindings.findChildViewById(rootView, id);
      if (textViewTitle == null) {
        break missingId;
      }

      id = R.id.tilScheduleDate;
      TextInputLayout tilScheduleDate = ViewBindings.findChildViewById(rootView, id);
      if (tilScheduleDate == null) {
        break missingId;
      }

      id = R.id.tilScheduleTime;
      TextInputLayout tilScheduleTime = ViewBindings.findChildViewById(rootView, id);
      if (tilScheduleTime == null) {
        break missingId;
      }

      id = R.id.tilScheduleTitle;
      TextInputLayout tilScheduleTitle = ViewBindings.findChildViewById(rootView, id);
      if (tilScheduleTitle == null) {
        break missingId;
      }

      id = R.id.tilScheduleType;
      TextInputLayout tilScheduleType = ViewBindings.findChildViewById(rootView, id);
      if (tilScheduleType == null) {
        break missingId;
      }

      return new FragmentAddEditScheduleBinding((ScrollView) rootView, autoCompleteScheduleType,
          buttonCancel, buttonSave, chipGroupReminders, editTextLocation, editTextNotes,
          editTextProfessional, editTextScheduleDate, editTextScheduleTime, editTextScheduleTitle,
          progressBar, textViewTitle, tilScheduleDate, tilScheduleTime, tilScheduleTitle,
          tilScheduleType);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

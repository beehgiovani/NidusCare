// Generated by view binder compiler. Do not edit!
package com.developersbeeh.medcontrol.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.developersbeeh.medcontrol.R;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.materialswitch.MaterialSwitch;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentReportsBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final MaterialButton buttonGenerateReport;

  @NonNull
  public final MaterialCardView cardAnalysis;

  @NonNull
  public final MaterialSwitch checkAdherenceChart;

  @NonNull
  public final MaterialSwitch checkAdherenceSummary;

  @NonNull
  public final MaterialSwitch checkAppointments;

  @NonNull
  public final MaterialSwitch checkDoseHistory;

  @NonNull
  public final Chip chipBloodPressure;

  @NonNull
  public final Chip chipBloodSugar;

  @NonNull
  public final Chip chipDetailedReport;

  @NonNull
  public final ChipGroup chipGroupNotes;

  @NonNull
  public final ChipGroup chipGroupReportType;

  @NonNull
  public final Chip chipMoodAndSymptoms;

  @NonNull
  public final Chip chipSimpleReport;

  @NonNull
  public final Chip chipTemperature;

  @NonNull
  public final Chip chipWeight;

  @NonNull
  public final TextInputEditText editTextEndDate;

  @NonNull
  public final TextInputEditText editTextStartDate;

  @NonNull
  public final TextView textViewTitle;

  @NonNull
  public final TextInputLayout tilEndDate;

  @NonNull
  public final TextInputLayout tilStartDate;

  @NonNull
  public final MaterialToolbar toolbar;

  private FragmentReportsBinding(@NonNull CoordinatorLayout rootView,
      @NonNull MaterialButton buttonGenerateReport, @NonNull MaterialCardView cardAnalysis,
      @NonNull MaterialSwitch checkAdherenceChart, @NonNull MaterialSwitch checkAdherenceSummary,
      @NonNull MaterialSwitch checkAppointments, @NonNull MaterialSwitch checkDoseHistory,
      @NonNull Chip chipBloodPressure, @NonNull Chip chipBloodSugar,
      @NonNull Chip chipDetailedReport, @NonNull ChipGroup chipGroupNotes,
      @NonNull ChipGroup chipGroupReportType, @NonNull Chip chipMoodAndSymptoms,
      @NonNull Chip chipSimpleReport, @NonNull Chip chipTemperature, @NonNull Chip chipWeight,
      @NonNull TextInputEditText editTextEndDate, @NonNull TextInputEditText editTextStartDate,
      @NonNull TextView textViewTitle, @NonNull TextInputLayout tilEndDate,
      @NonNull TextInputLayout tilStartDate, @NonNull MaterialToolbar toolbar) {
    this.rootView = rootView;
    this.buttonGenerateReport = buttonGenerateReport;
    this.cardAnalysis = cardAnalysis;
    this.checkAdherenceChart = checkAdherenceChart;
    this.checkAdherenceSummary = checkAdherenceSummary;
    this.checkAppointments = checkAppointments;
    this.checkDoseHistory = checkDoseHistory;
    this.chipBloodPressure = chipBloodPressure;
    this.chipBloodSugar = chipBloodSugar;
    this.chipDetailedReport = chipDetailedReport;
    this.chipGroupNotes = chipGroupNotes;
    this.chipGroupReportType = chipGroupReportType;
    this.chipMoodAndSymptoms = chipMoodAndSymptoms;
    this.chipSimpleReport = chipSimpleReport;
    this.chipTemperature = chipTemperature;
    this.chipWeight = chipWeight;
    this.editTextEndDate = editTextEndDate;
    this.editTextStartDate = editTextStartDate;
    this.textViewTitle = textViewTitle;
    this.tilEndDate = tilEndDate;
    this.tilStartDate = tilStartDate;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentReportsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentReportsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_reports, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentReportsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonGenerateReport;
      MaterialButton buttonGenerateReport = ViewBindings.findChildViewById(rootView, id);
      if (buttonGenerateReport == null) {
        break missingId;
      }

      id = R.id.card_analysis;
      MaterialCardView cardAnalysis = ViewBindings.findChildViewById(rootView, id);
      if (cardAnalysis == null) {
        break missingId;
      }

      id = R.id.checkAdherenceChart;
      MaterialSwitch checkAdherenceChart = ViewBindings.findChildViewById(rootView, id);
      if (checkAdherenceChart == null) {
        break missingId;
      }

      id = R.id.checkAdherenceSummary;
      MaterialSwitch checkAdherenceSummary = ViewBindings.findChildViewById(rootView, id);
      if (checkAdherenceSummary == null) {
        break missingId;
      }

      id = R.id.checkAppointments;
      MaterialSwitch checkAppointments = ViewBindings.findChildViewById(rootView, id);
      if (checkAppointments == null) {
        break missingId;
      }

      id = R.id.checkDoseHistory;
      MaterialSwitch checkDoseHistory = ViewBindings.findChildViewById(rootView, id);
      if (checkDoseHistory == null) {
        break missingId;
      }

      id = R.id.chipBloodPressure;
      Chip chipBloodPressure = ViewBindings.findChildViewById(rootView, id);
      if (chipBloodPressure == null) {
        break missingId;
      }

      id = R.id.chipBloodSugar;
      Chip chipBloodSugar = ViewBindings.findChildViewById(rootView, id);
      if (chipBloodSugar == null) {
        break missingId;
      }

      id = R.id.chipDetailedReport;
      Chip chipDetailedReport = ViewBindings.findChildViewById(rootView, id);
      if (chipDetailedReport == null) {
        break missingId;
      }

      id = R.id.chipGroupNotes;
      ChipGroup chipGroupNotes = ViewBindings.findChildViewById(rootView, id);
      if (chipGroupNotes == null) {
        break missingId;
      }

      id = R.id.chipGroupReportType;
      ChipGroup chipGroupReportType = ViewBindings.findChildViewById(rootView, id);
      if (chipGroupReportType == null) {
        break missingId;
      }

      id = R.id.chipMoodAndSymptoms;
      Chip chipMoodAndSymptoms = ViewBindings.findChildViewById(rootView, id);
      if (chipMoodAndSymptoms == null) {
        break missingId;
      }

      id = R.id.chipSimpleReport;
      Chip chipSimpleReport = ViewBindings.findChildViewById(rootView, id);
      if (chipSimpleReport == null) {
        break missingId;
      }

      id = R.id.chipTemperature;
      Chip chipTemperature = ViewBindings.findChildViewById(rootView, id);
      if (chipTemperature == null) {
        break missingId;
      }

      id = R.id.chipWeight;
      Chip chipWeight = ViewBindings.findChildViewById(rootView, id);
      if (chipWeight == null) {
        break missingId;
      }

      id = R.id.editTextEndDate;
      TextInputEditText editTextEndDate = ViewBindings.findChildViewById(rootView, id);
      if (editTextEndDate == null) {
        break missingId;
      }

      id = R.id.editTextStartDate;
      TextInputEditText editTextStartDate = ViewBindings.findChildViewById(rootView, id);
      if (editTextStartDate == null) {
        break missingId;
      }

      id = R.id.textViewTitle;
      TextView textViewTitle = ViewBindings.findChildViewById(rootView, id);
      if (textViewTitle == null) {
        break missingId;
      }

      id = R.id.tilEndDate;
      TextInputLayout tilEndDate = ViewBindings.findChildViewById(rootView, id);
      if (tilEndDate == null) {
        break missingId;
      }

      id = R.id.tilStartDate;
      TextInputLayout tilStartDate = ViewBindings.findChildViewById(rootView, id);
      if (tilStartDate == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new FragmentReportsBinding((CoordinatorLayout) rootView, buttonGenerateReport,
          cardAnalysis, checkAdherenceChart, checkAdherenceSummary, checkAppointments,
          checkDoseHistory, chipBloodPressure, chipBloodSugar, chipDetailedReport, chipGroupNotes,
          chipGroupReportType, chipMoodAndSymptoms, chipSimpleReport, chipTemperature, chipWeight,
          editTextEndDate, editTextStartDate, textViewTitle, tilEndDate, tilStartDate, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

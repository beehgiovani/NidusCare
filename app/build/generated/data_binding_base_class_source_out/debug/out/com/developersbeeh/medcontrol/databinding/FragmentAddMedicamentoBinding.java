// Generated by view binder compiler. Do not edit!
package com.developersbeeh.medcontrol.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.developersbeeh.medcontrol.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.divider.MaterialDivider;
import com.google.android.material.materialswitch.MaterialSwitch;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentAddMedicamentoBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final AutoCompleteTextView autoCompleteUnidade;

  @NonNull
  public final AutoCompleteTextView autoCompleteUnidadeDuracao;

  @NonNull
  public final MaterialButton buttonAddHorario;

  @NonNull
  public final MaterialButton buttonAddIntervalo;

  @NonNull
  public final MaterialButton buttonAddLocal;

  @NonNull
  public final MaterialButton buttonAddLote;

  @NonNull
  public final MaterialButton buttonCancelar;

  @NonNull
  public final MaterialButton buttonCopyData;

  @NonNull
  public final ImageButton buttonDismissSuggestion;

  @NonNull
  public final MaterialButton buttonSalvar;

  @NonNull
  public final MaterialCardView cardStep1;

  @NonNull
  public final MaterialCardView cardStep2;

  @NonNull
  public final MaterialCardView cardStep3;

  @NonNull
  public final MaterialCardView cardStep4;

  @NonNull
  public final MaterialSwitch checkboxNotificacao;

  @NonNull
  public final Chip chipDiariamente;

  @NonNull
  public final Chip chipDiasDaSemana;

  @NonNull
  public final Chip chipDom;

  @NonNull
  public final ChipGroup chipGroupDiasSemana;

  @NonNull
  public final ChipGroup chipGroupFrequenciaTipo;

  @NonNull
  public final ChipGroup chipGroupHorarios;

  @NonNull
  public final ChipGroup chipGroupLocais;

  @NonNull
  public final Chip chipIntervaloDias;

  @NonNull
  public final Chip chipQua;

  @NonNull
  public final Chip chipQui;

  @NonNull
  public final Chip chipSab;

  @NonNull
  public final Chip chipSeg;

  @NonNull
  public final Chip chipSex;

  @NonNull
  public final Chip chipTer;

  @NonNull
  public final LinearLayout contentStep1;

  @NonNull
  public final LinearLayout contentStep2;

  @NonNull
  public final LinearLayout contentStep3;

  @NonNull
  public final LinearLayout contentStep4;

  @NonNull
  public final MaterialDivider dividerLotes;

  @NonNull
  public final TextInputEditText editTextAnotacoes;

  @NonNull
  public final TextInputEditText editTextClasseTerapeutica;

  @NonNull
  public final TextInputEditText editTextDataInicio;

  @NonNull
  public final TextInputEditText editTextDataTermino;

  @NonNull
  public final TextInputEditText editTextDosagemValor;

  @NonNull
  public final TextInputEditText editTextDuracao;

  @NonNull
  public final TextInputEditText editTextFatorSensibilidade;

  @NonNull
  public final TextInputEditText editTextFrequenciaValor;

  @NonNull
  public final TextInputEditText editTextGlicemiaAlvo;

  @NonNull
  public final TextInputEditText editTextLoteQuantidade;

  @NonNull
  public final TextInputEditText editTextLoteValidade;

  @NonNull
  public final TextInputEditText editTextNivelAlerta;

  @NonNull
  public final TextInputEditText editTextNome;

  @NonNull
  public final TextInputEditText editTextNovoLocal;

  @NonNull
  public final TextInputEditText editTextPrincipioAtivo;

  @NonNull
  public final TextInputEditText editTextRatioCarboidrato;

  @NonNull
  public final LinearLayout headerStep1;

  @NonNull
  public final LinearLayout headerStep2;

  @NonNull
  public final LinearLayout headerStep3;

  @NonNull
  public final LinearLayout headerStep4;

  @NonNull
  public final ImageView iconStep1;

  @NonNull
  public final ImageView iconStep2;

  @NonNull
  public final ImageView iconStep3;

  @NonNull
  public final ImageView iconStep4;

  @NonNull
  public final LinearLayout layoutDoseCalculada;

  @NonNull
  public final LinearLayout layoutDoseFixa;

  @NonNull
  public final LinearLayout layoutDuracao;

  @NonNull
  public final LinearLayout layoutFrequenciaDiaria;

  @NonNull
  public final LinearLayout layoutFrequenciaIntervalo;

  @NonNull
  public final LinearLayout layoutFrequenciaSemanal;

  @NonNull
  public final LinearLayout layoutLocaisAplicacao;

  @NonNull
  public final RadioButton radioDoseCalculada;

  @NonNull
  public final RadioButton radioDoseFixa;

  @NonNull
  public final RadioButton radioDoseManual;

  @NonNull
  public final RadioGroup radioGroupTermino;

  @NonNull
  public final RadioGroup radioGroupTipoDosagem;

  @NonNull
  public final RadioGroup radioGroupTipoMedicamento;

  @NonNull
  public final RadioButton radioInjetavel;

  @NonNull
  public final RadioButton radioOral;

  @NonNull
  public final RadioButton radioTerminoContinuo;

  @NonNull
  public final RadioButton radioTerminoDataFim;

  @NonNull
  public final RadioButton radioTerminoDuracao;

  @NonNull
  public final RadioButton radioTopico;

  @NonNull
  public final RecyclerView recyclerViewLotes;

  @NonNull
  public final RecyclerView recyclerViewSearchResults;

  @NonNull
  public final MaterialCardView suggestionCard;

  @NonNull
  public final TextView suggestionDetailsText;

  @NonNull
  public final ImageView suggestionIcon;

  @NonNull
  public final TextView suggestionTitle;

  @NonNull
  public final TextView summaryStep1;

  @NonNull
  public final TextView summaryStep2;

  @NonNull
  public final TextView summaryStep3;

  @NonNull
  public final TextView summaryStep4;

  @NonNull
  public final MaterialSwitch switchUsoEsporadico;

  @NonNull
  public final TextView textViewTitle;

  @NonNull
  public final TextInputLayout tilAnotacoes;

  @NonNull
  public final TextInputLayout tilClasseTerapeutica;

  @NonNull
  public final TextInputLayout tilDataInicio;

  @NonNull
  public final TextInputLayout tilDataTermino;

  @NonNull
  public final TextInputLayout tilDosagemUnidade;

  @NonNull
  public final TextInputLayout tilDosagemValor;

  @NonNull
  public final TextInputLayout tilDuracao;

  @NonNull
  public final TextInputLayout tilDuracaoUnidade;

  @NonNull
  public final TextInputLayout tilFrequenciaValor;

  @NonNull
  public final TextInputLayout tilLoteQuantidade;

  @NonNull
  public final TextInputLayout tilLoteValidade;

  @NonNull
  public final TextInputLayout tilNivelAlerta;

  @NonNull
  public final TextInputLayout tilNome;

  @NonNull
  public final TextInputLayout tilNovoLocal;

  @NonNull
  public final TextInputLayout tilPrincipioAtivo;

  private FragmentAddMedicamentoBinding(@NonNull ScrollView rootView,
      @NonNull AutoCompleteTextView autoCompleteUnidade,
      @NonNull AutoCompleteTextView autoCompleteUnidadeDuracao,
      @NonNull MaterialButton buttonAddHorario, @NonNull MaterialButton buttonAddIntervalo,
      @NonNull MaterialButton buttonAddLocal, @NonNull MaterialButton buttonAddLote,
      @NonNull MaterialButton buttonCancelar, @NonNull MaterialButton buttonCopyData,
      @NonNull ImageButton buttonDismissSuggestion, @NonNull MaterialButton buttonSalvar,
      @NonNull MaterialCardView cardStep1, @NonNull MaterialCardView cardStep2,
      @NonNull MaterialCardView cardStep3, @NonNull MaterialCardView cardStep4,
      @NonNull MaterialSwitch checkboxNotificacao, @NonNull Chip chipDiariamente,
      @NonNull Chip chipDiasDaSemana, @NonNull Chip chipDom, @NonNull ChipGroup chipGroupDiasSemana,
      @NonNull ChipGroup chipGroupFrequenciaTipo, @NonNull ChipGroup chipGroupHorarios,
      @NonNull ChipGroup chipGroupLocais, @NonNull Chip chipIntervaloDias, @NonNull Chip chipQua,
      @NonNull Chip chipQui, @NonNull Chip chipSab, @NonNull Chip chipSeg, @NonNull Chip chipSex,
      @NonNull Chip chipTer, @NonNull LinearLayout contentStep1, @NonNull LinearLayout contentStep2,
      @NonNull LinearLayout contentStep3, @NonNull LinearLayout contentStep4,
      @NonNull MaterialDivider dividerLotes, @NonNull TextInputEditText editTextAnotacoes,
      @NonNull TextInputEditText editTextClasseTerapeutica,
      @NonNull TextInputEditText editTextDataInicio, @NonNull TextInputEditText editTextDataTermino,
      @NonNull TextInputEditText editTextDosagemValor, @NonNull TextInputEditText editTextDuracao,
      @NonNull TextInputEditText editTextFatorSensibilidade,
      @NonNull TextInputEditText editTextFrequenciaValor,
      @NonNull TextInputEditText editTextGlicemiaAlvo,
      @NonNull TextInputEditText editTextLoteQuantidade,
      @NonNull TextInputEditText editTextLoteValidade,
      @NonNull TextInputEditText editTextNivelAlerta, @NonNull TextInputEditText editTextNome,
      @NonNull TextInputEditText editTextNovoLocal,
      @NonNull TextInputEditText editTextPrincipioAtivo,
      @NonNull TextInputEditText editTextRatioCarboidrato, @NonNull LinearLayout headerStep1,
      @NonNull LinearLayout headerStep2, @NonNull LinearLayout headerStep3,
      @NonNull LinearLayout headerStep4, @NonNull ImageView iconStep1, @NonNull ImageView iconStep2,
      @NonNull ImageView iconStep3, @NonNull ImageView iconStep4,
      @NonNull LinearLayout layoutDoseCalculada, @NonNull LinearLayout layoutDoseFixa,
      @NonNull LinearLayout layoutDuracao, @NonNull LinearLayout layoutFrequenciaDiaria,
      @NonNull LinearLayout layoutFrequenciaIntervalo,
      @NonNull LinearLayout layoutFrequenciaSemanal, @NonNull LinearLayout layoutLocaisAplicacao,
      @NonNull RadioButton radioDoseCalculada, @NonNull RadioButton radioDoseFixa,
      @NonNull RadioButton radioDoseManual, @NonNull RadioGroup radioGroupTermino,
      @NonNull RadioGroup radioGroupTipoDosagem, @NonNull RadioGroup radioGroupTipoMedicamento,
      @NonNull RadioButton radioInjetavel, @NonNull RadioButton radioOral,
      @NonNull RadioButton radioTerminoContinuo, @NonNull RadioButton radioTerminoDataFim,
      @NonNull RadioButton radioTerminoDuracao, @NonNull RadioButton radioTopico,
      @NonNull RecyclerView recyclerViewLotes, @NonNull RecyclerView recyclerViewSearchResults,
      @NonNull MaterialCardView suggestionCard, @NonNull TextView suggestionDetailsText,
      @NonNull ImageView suggestionIcon, @NonNull TextView suggestionTitle,
      @NonNull TextView summaryStep1, @NonNull TextView summaryStep2,
      @NonNull TextView summaryStep3, @NonNull TextView summaryStep4,
      @NonNull MaterialSwitch switchUsoEsporadico, @NonNull TextView textViewTitle,
      @NonNull TextInputLayout tilAnotacoes, @NonNull TextInputLayout tilClasseTerapeutica,
      @NonNull TextInputLayout tilDataInicio, @NonNull TextInputLayout tilDataTermino,
      @NonNull TextInputLayout tilDosagemUnidade, @NonNull TextInputLayout tilDosagemValor,
      @NonNull TextInputLayout tilDuracao, @NonNull TextInputLayout tilDuracaoUnidade,
      @NonNull TextInputLayout tilFrequenciaValor, @NonNull TextInputLayout tilLoteQuantidade,
      @NonNull TextInputLayout tilLoteValidade, @NonNull TextInputLayout tilNivelAlerta,
      @NonNull TextInputLayout tilNome, @NonNull TextInputLayout tilNovoLocal,
      @NonNull TextInputLayout tilPrincipioAtivo) {
    this.rootView = rootView;
    this.autoCompleteUnidade = autoCompleteUnidade;
    this.autoCompleteUnidadeDuracao = autoCompleteUnidadeDuracao;
    this.buttonAddHorario = buttonAddHorario;
    this.buttonAddIntervalo = buttonAddIntervalo;
    this.buttonAddLocal = buttonAddLocal;
    this.buttonAddLote = buttonAddLote;
    this.buttonCancelar = buttonCancelar;
    this.buttonCopyData = buttonCopyData;
    this.buttonDismissSuggestion = buttonDismissSuggestion;
    this.buttonSalvar = buttonSalvar;
    this.cardStep1 = cardStep1;
    this.cardStep2 = cardStep2;
    this.cardStep3 = cardStep3;
    this.cardStep4 = cardStep4;
    this.checkboxNotificacao = checkboxNotificacao;
    this.chipDiariamente = chipDiariamente;
    this.chipDiasDaSemana = chipDiasDaSemana;
    this.chipDom = chipDom;
    this.chipGroupDiasSemana = chipGroupDiasSemana;
    this.chipGroupFrequenciaTipo = chipGroupFrequenciaTipo;
    this.chipGroupHorarios = chipGroupHorarios;
    this.chipGroupLocais = chipGroupLocais;
    this.chipIntervaloDias = chipIntervaloDias;
    this.chipQua = chipQua;
    this.chipQui = chipQui;
    this.chipSab = chipSab;
    this.chipSeg = chipSeg;
    this.chipSex = chipSex;
    this.chipTer = chipTer;
    this.contentStep1 = contentStep1;
    this.contentStep2 = contentStep2;
    this.contentStep3 = contentStep3;
    this.contentStep4 = contentStep4;
    this.dividerLotes = dividerLotes;
    this.editTextAnotacoes = editTextAnotacoes;
    this.editTextClasseTerapeutica = editTextClasseTerapeutica;
    this.editTextDataInicio = editTextDataInicio;
    this.editTextDataTermino = editTextDataTermino;
    this.editTextDosagemValor = editTextDosagemValor;
    this.editTextDuracao = editTextDuracao;
    this.editTextFatorSensibilidade = editTextFatorSensibilidade;
    this.editTextFrequenciaValor = editTextFrequenciaValor;
    this.editTextGlicemiaAlvo = editTextGlicemiaAlvo;
    this.editTextLoteQuantidade = editTextLoteQuantidade;
    this.editTextLoteValidade = editTextLoteValidade;
    this.editTextNivelAlerta = editTextNivelAlerta;
    this.editTextNome = editTextNome;
    this.editTextNovoLocal = editTextNovoLocal;
    this.editTextPrincipioAtivo = editTextPrincipioAtivo;
    this.editTextRatioCarboidrato = editTextRatioCarboidrato;
    this.headerStep1 = headerStep1;
    this.headerStep2 = headerStep2;
    this.headerStep3 = headerStep3;
    this.headerStep4 = headerStep4;
    this.iconStep1 = iconStep1;
    this.iconStep2 = iconStep2;
    this.iconStep3 = iconStep3;
    this.iconStep4 = iconStep4;
    this.layoutDoseCalculada = layoutDoseCalculada;
    this.layoutDoseFixa = layoutDoseFixa;
    this.layoutDuracao = layoutDuracao;
    this.layoutFrequenciaDiaria = layoutFrequenciaDiaria;
    this.layoutFrequenciaIntervalo = layoutFrequenciaIntervalo;
    this.layoutFrequenciaSemanal = layoutFrequenciaSemanal;
    this.layoutLocaisAplicacao = layoutLocaisAplicacao;
    this.radioDoseCalculada = radioDoseCalculada;
    this.radioDoseFixa = radioDoseFixa;
    this.radioDoseManual = radioDoseManual;
    this.radioGroupTermino = radioGroupTermino;
    this.radioGroupTipoDosagem = radioGroupTipoDosagem;
    this.radioGroupTipoMedicamento = radioGroupTipoMedicamento;
    this.radioInjetavel = radioInjetavel;
    this.radioOral = radioOral;
    this.radioTerminoContinuo = radioTerminoContinuo;
    this.radioTerminoDataFim = radioTerminoDataFim;
    this.radioTerminoDuracao = radioTerminoDuracao;
    this.radioTopico = radioTopico;
    this.recyclerViewLotes = recyclerViewLotes;
    this.recyclerViewSearchResults = recyclerViewSearchResults;
    this.suggestionCard = suggestionCard;
    this.suggestionDetailsText = suggestionDetailsText;
    this.suggestionIcon = suggestionIcon;
    this.suggestionTitle = suggestionTitle;
    this.summaryStep1 = summaryStep1;
    this.summaryStep2 = summaryStep2;
    this.summaryStep3 = summaryStep3;
    this.summaryStep4 = summaryStep4;
    this.switchUsoEsporadico = switchUsoEsporadico;
    this.textViewTitle = textViewTitle;
    this.tilAnotacoes = tilAnotacoes;
    this.tilClasseTerapeutica = tilClasseTerapeutica;
    this.tilDataInicio = tilDataInicio;
    this.tilDataTermino = tilDataTermino;
    this.tilDosagemUnidade = tilDosagemUnidade;
    this.tilDosagemValor = tilDosagemValor;
    this.tilDuracao = tilDuracao;
    this.tilDuracaoUnidade = tilDuracaoUnidade;
    this.tilFrequenciaValor = tilFrequenciaValor;
    this.tilLoteQuantidade = tilLoteQuantidade;
    this.tilLoteValidade = tilLoteValidade;
    this.tilNivelAlerta = tilNivelAlerta;
    this.tilNome = tilNome;
    this.tilNovoLocal = tilNovoLocal;
    this.tilPrincipioAtivo = tilPrincipioAtivo;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAddMedicamentoBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAddMedicamentoBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_add_medicamento, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAddMedicamentoBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.autoCompleteUnidade;
      AutoCompleteTextView autoCompleteUnidade = ViewBindings.findChildViewById(rootView, id);
      if (autoCompleteUnidade == null) {
        break missingId;
      }

      id = R.id.autoCompleteUnidadeDuracao;
      AutoCompleteTextView autoCompleteUnidadeDuracao = ViewBindings.findChildViewById(rootView, id);
      if (autoCompleteUnidadeDuracao == null) {
        break missingId;
      }

      id = R.id.buttonAddHorario;
      MaterialButton buttonAddHorario = ViewBindings.findChildViewById(rootView, id);
      if (buttonAddHorario == null) {
        break missingId;
      }

      id = R.id.buttonAddIntervalo;
      MaterialButton buttonAddIntervalo = ViewBindings.findChildViewById(rootView, id);
      if (buttonAddIntervalo == null) {
        break missingId;
      }

      id = R.id.buttonAddLocal;
      MaterialButton buttonAddLocal = ViewBindings.findChildViewById(rootView, id);
      if (buttonAddLocal == null) {
        break missingId;
      }

      id = R.id.buttonAddLote;
      MaterialButton buttonAddLote = ViewBindings.findChildViewById(rootView, id);
      if (buttonAddLote == null) {
        break missingId;
      }

      id = R.id.buttonCancelar;
      MaterialButton buttonCancelar = ViewBindings.findChildViewById(rootView, id);
      if (buttonCancelar == null) {
        break missingId;
      }

      id = R.id.buttonCopyData;
      MaterialButton buttonCopyData = ViewBindings.findChildViewById(rootView, id);
      if (buttonCopyData == null) {
        break missingId;
      }

      id = R.id.buttonDismissSuggestion;
      ImageButton buttonDismissSuggestion = ViewBindings.findChildViewById(rootView, id);
      if (buttonDismissSuggestion == null) {
        break missingId;
      }

      id = R.id.buttonSalvar;
      MaterialButton buttonSalvar = ViewBindings.findChildViewById(rootView, id);
      if (buttonSalvar == null) {
        break missingId;
      }

      id = R.id.cardStep1;
      MaterialCardView cardStep1 = ViewBindings.findChildViewById(rootView, id);
      if (cardStep1 == null) {
        break missingId;
      }

      id = R.id.cardStep2;
      MaterialCardView cardStep2 = ViewBindings.findChildViewById(rootView, id);
      if (cardStep2 == null) {
        break missingId;
      }

      id = R.id.cardStep3;
      MaterialCardView cardStep3 = ViewBindings.findChildViewById(rootView, id);
      if (cardStep3 == null) {
        break missingId;
      }

      id = R.id.cardStep4;
      MaterialCardView cardStep4 = ViewBindings.findChildViewById(rootView, id);
      if (cardStep4 == null) {
        break missingId;
      }

      id = R.id.checkboxNotificacao;
      MaterialSwitch checkboxNotificacao = ViewBindings.findChildViewById(rootView, id);
      if (checkboxNotificacao == null) {
        break missingId;
      }

      id = R.id.chipDiariamente;
      Chip chipDiariamente = ViewBindings.findChildViewById(rootView, id);
      if (chipDiariamente == null) {
        break missingId;
      }

      id = R.id.chipDiasDaSemana;
      Chip chipDiasDaSemana = ViewBindings.findChildViewById(rootView, id);
      if (chipDiasDaSemana == null) {
        break missingId;
      }

      id = R.id.chipDom;
      Chip chipDom = ViewBindings.findChildViewById(rootView, id);
      if (chipDom == null) {
        break missingId;
      }

      id = R.id.chipGroupDiasSemana;
      ChipGroup chipGroupDiasSemana = ViewBindings.findChildViewById(rootView, id);
      if (chipGroupDiasSemana == null) {
        break missingId;
      }

      id = R.id.chipGroupFrequenciaTipo;
      ChipGroup chipGroupFrequenciaTipo = ViewBindings.findChildViewById(rootView, id);
      if (chipGroupFrequenciaTipo == null) {
        break missingId;
      }

      id = R.id.chipGroupHorarios;
      ChipGroup chipGroupHorarios = ViewBindings.findChildViewById(rootView, id);
      if (chipGroupHorarios == null) {
        break missingId;
      }

      id = R.id.chipGroupLocais;
      ChipGroup chipGroupLocais = ViewBindings.findChildViewById(rootView, id);
      if (chipGroupLocais == null) {
        break missingId;
      }

      id = R.id.chipIntervaloDias;
      Chip chipIntervaloDias = ViewBindings.findChildViewById(rootView, id);
      if (chipIntervaloDias == null) {
        break missingId;
      }

      id = R.id.chipQua;
      Chip chipQua = ViewBindings.findChildViewById(rootView, id);
      if (chipQua == null) {
        break missingId;
      }

      id = R.id.chipQui;
      Chip chipQui = ViewBindings.findChildViewById(rootView, id);
      if (chipQui == null) {
        break missingId;
      }

      id = R.id.chipSab;
      Chip chipSab = ViewBindings.findChildViewById(rootView, id);
      if (chipSab == null) {
        break missingId;
      }

      id = R.id.chipSeg;
      Chip chipSeg = ViewBindings.findChildViewById(rootView, id);
      if (chipSeg == null) {
        break missingId;
      }

      id = R.id.chipSex;
      Chip chipSex = ViewBindings.findChildViewById(rootView, id);
      if (chipSex == null) {
        break missingId;
      }

      id = R.id.chipTer;
      Chip chipTer = ViewBindings.findChildViewById(rootView, id);
      if (chipTer == null) {
        break missingId;
      }

      id = R.id.contentStep1;
      LinearLayout contentStep1 = ViewBindings.findChildViewById(rootView, id);
      if (contentStep1 == null) {
        break missingId;
      }

      id = R.id.contentStep2;
      LinearLayout contentStep2 = ViewBindings.findChildViewById(rootView, id);
      if (contentStep2 == null) {
        break missingId;
      }

      id = R.id.contentStep3;
      LinearLayout contentStep3 = ViewBindings.findChildViewById(rootView, id);
      if (contentStep3 == null) {
        break missingId;
      }

      id = R.id.contentStep4;
      LinearLayout contentStep4 = ViewBindings.findChildViewById(rootView, id);
      if (contentStep4 == null) {
        break missingId;
      }

      id = R.id.dividerLotes;
      MaterialDivider dividerLotes = ViewBindings.findChildViewById(rootView, id);
      if (dividerLotes == null) {
        break missingId;
      }

      id = R.id.editTextAnotacoes;
      TextInputEditText editTextAnotacoes = ViewBindings.findChildViewById(rootView, id);
      if (editTextAnotacoes == null) {
        break missingId;
      }

      id = R.id.editTextClasseTerapeutica;
      TextInputEditText editTextClasseTerapeutica = ViewBindings.findChildViewById(rootView, id);
      if (editTextClasseTerapeutica == null) {
        break missingId;
      }

      id = R.id.editTextDataInicio;
      TextInputEditText editTextDataInicio = ViewBindings.findChildViewById(rootView, id);
      if (editTextDataInicio == null) {
        break missingId;
      }

      id = R.id.editTextDataTermino;
      TextInputEditText editTextDataTermino = ViewBindings.findChildViewById(rootView, id);
      if (editTextDataTermino == null) {
        break missingId;
      }

      id = R.id.editTextDosagemValor;
      TextInputEditText editTextDosagemValor = ViewBindings.findChildViewById(rootView, id);
      if (editTextDosagemValor == null) {
        break missingId;
      }

      id = R.id.editTextDuracao;
      TextInputEditText editTextDuracao = ViewBindings.findChildViewById(rootView, id);
      if (editTextDuracao == null) {
        break missingId;
      }

      id = R.id.editTextFatorSensibilidade;
      TextInputEditText editTextFatorSensibilidade = ViewBindings.findChildViewById(rootView, id);
      if (editTextFatorSensibilidade == null) {
        break missingId;
      }

      id = R.id.editTextFrequenciaValor;
      TextInputEditText editTextFrequenciaValor = ViewBindings.findChildViewById(rootView, id);
      if (editTextFrequenciaValor == null) {
        break missingId;
      }

      id = R.id.editTextGlicemiaAlvo;
      TextInputEditText editTextGlicemiaAlvo = ViewBindings.findChildViewById(rootView, id);
      if (editTextGlicemiaAlvo == null) {
        break missingId;
      }

      id = R.id.editTextLoteQuantidade;
      TextInputEditText editTextLoteQuantidade = ViewBindings.findChildViewById(rootView, id);
      if (editTextLoteQuantidade == null) {
        break missingId;
      }

      id = R.id.editTextLoteValidade;
      TextInputEditText editTextLoteValidade = ViewBindings.findChildViewById(rootView, id);
      if (editTextLoteValidade == null) {
        break missingId;
      }

      id = R.id.editTextNivelAlerta;
      TextInputEditText editTextNivelAlerta = ViewBindings.findChildViewById(rootView, id);
      if (editTextNivelAlerta == null) {
        break missingId;
      }

      id = R.id.editTextNome;
      TextInputEditText editTextNome = ViewBindings.findChildViewById(rootView, id);
      if (editTextNome == null) {
        break missingId;
      }

      id = R.id.editTextNovoLocal;
      TextInputEditText editTextNovoLocal = ViewBindings.findChildViewById(rootView, id);
      if (editTextNovoLocal == null) {
        break missingId;
      }

      id = R.id.editTextPrincipioAtivo;
      TextInputEditText editTextPrincipioAtivo = ViewBindings.findChildViewById(rootView, id);
      if (editTextPrincipioAtivo == null) {
        break missingId;
      }

      id = R.id.editTextRatioCarboidrato;
      TextInputEditText editTextRatioCarboidrato = ViewBindings.findChildViewById(rootView, id);
      if (editTextRatioCarboidrato == null) {
        break missingId;
      }

      id = R.id.headerStep1;
      LinearLayout headerStep1 = ViewBindings.findChildViewById(rootView, id);
      if (headerStep1 == null) {
        break missingId;
      }

      id = R.id.headerStep2;
      LinearLayout headerStep2 = ViewBindings.findChildViewById(rootView, id);
      if (headerStep2 == null) {
        break missingId;
      }

      id = R.id.headerStep3;
      LinearLayout headerStep3 = ViewBindings.findChildViewById(rootView, id);
      if (headerStep3 == null) {
        break missingId;
      }

      id = R.id.headerStep4;
      LinearLayout headerStep4 = ViewBindings.findChildViewById(rootView, id);
      if (headerStep4 == null) {
        break missingId;
      }

      id = R.id.iconStep1;
      ImageView iconStep1 = ViewBindings.findChildViewById(rootView, id);
      if (iconStep1 == null) {
        break missingId;
      }

      id = R.id.iconStep2;
      ImageView iconStep2 = ViewBindings.findChildViewById(rootView, id);
      if (iconStep2 == null) {
        break missingId;
      }

      id = R.id.iconStep3;
      ImageView iconStep3 = ViewBindings.findChildViewById(rootView, id);
      if (iconStep3 == null) {
        break missingId;
      }

      id = R.id.iconStep4;
      ImageView iconStep4 = ViewBindings.findChildViewById(rootView, id);
      if (iconStep4 == null) {
        break missingId;
      }

      id = R.id.layoutDoseCalculada;
      LinearLayout layoutDoseCalculada = ViewBindings.findChildViewById(rootView, id);
      if (layoutDoseCalculada == null) {
        break missingId;
      }

      id = R.id.layoutDoseFixa;
      LinearLayout layoutDoseFixa = ViewBindings.findChildViewById(rootView, id);
      if (layoutDoseFixa == null) {
        break missingId;
      }

      id = R.id.layoutDuracao;
      LinearLayout layoutDuracao = ViewBindings.findChildViewById(rootView, id);
      if (layoutDuracao == null) {
        break missingId;
      }

      id = R.id.layoutFrequenciaDiaria;
      LinearLayout layoutFrequenciaDiaria = ViewBindings.findChildViewById(rootView, id);
      if (layoutFrequenciaDiaria == null) {
        break missingId;
      }

      id = R.id.layoutFrequenciaIntervalo;
      LinearLayout layoutFrequenciaIntervalo = ViewBindings.findChildViewById(rootView, id);
      if (layoutFrequenciaIntervalo == null) {
        break missingId;
      }

      id = R.id.layoutFrequenciaSemanal;
      LinearLayout layoutFrequenciaSemanal = ViewBindings.findChildViewById(rootView, id);
      if (layoutFrequenciaSemanal == null) {
        break missingId;
      }

      id = R.id.layoutLocaisAplicacao;
      LinearLayout layoutLocaisAplicacao = ViewBindings.findChildViewById(rootView, id);
      if (layoutLocaisAplicacao == null) {
        break missingId;
      }

      id = R.id.radioDoseCalculada;
      RadioButton radioDoseCalculada = ViewBindings.findChildViewById(rootView, id);
      if (radioDoseCalculada == null) {
        break missingId;
      }

      id = R.id.radioDoseFixa;
      RadioButton radioDoseFixa = ViewBindings.findChildViewById(rootView, id);
      if (radioDoseFixa == null) {
        break missingId;
      }

      id = R.id.radioDoseManual;
      RadioButton radioDoseManual = ViewBindings.findChildViewById(rootView, id);
      if (radioDoseManual == null) {
        break missingId;
      }

      id = R.id.radioGroupTermino;
      RadioGroup radioGroupTermino = ViewBindings.findChildViewById(rootView, id);
      if (radioGroupTermino == null) {
        break missingId;
      }

      id = R.id.radioGroupTipoDosagem;
      RadioGroup radioGroupTipoDosagem = ViewBindings.findChildViewById(rootView, id);
      if (radioGroupTipoDosagem == null) {
        break missingId;
      }

      id = R.id.radioGroupTipoMedicamento;
      RadioGroup radioGroupTipoMedicamento = ViewBindings.findChildViewById(rootView, id);
      if (radioGroupTipoMedicamento == null) {
        break missingId;
      }

      id = R.id.radioInjetavel;
      RadioButton radioInjetavel = ViewBindings.findChildViewById(rootView, id);
      if (radioInjetavel == null) {
        break missingId;
      }

      id = R.id.radioOral;
      RadioButton radioOral = ViewBindings.findChildViewById(rootView, id);
      if (radioOral == null) {
        break missingId;
      }

      id = R.id.radioTerminoContinuo;
      RadioButton radioTerminoContinuo = ViewBindings.findChildViewById(rootView, id);
      if (radioTerminoContinuo == null) {
        break missingId;
      }

      id = R.id.radioTerminoDataFim;
      RadioButton radioTerminoDataFim = ViewBindings.findChildViewById(rootView, id);
      if (radioTerminoDataFim == null) {
        break missingId;
      }

      id = R.id.radioTerminoDuracao;
      RadioButton radioTerminoDuracao = ViewBindings.findChildViewById(rootView, id);
      if (radioTerminoDuracao == null) {
        break missingId;
      }

      id = R.id.radioTopico;
      RadioButton radioTopico = ViewBindings.findChildViewById(rootView, id);
      if (radioTopico == null) {
        break missingId;
      }

      id = R.id.recyclerViewLotes;
      RecyclerView recyclerViewLotes = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewLotes == null) {
        break missingId;
      }

      id = R.id.recyclerViewSearchResults;
      RecyclerView recyclerViewSearchResults = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewSearchResults == null) {
        break missingId;
      }

      id = R.id.suggestionCard;
      MaterialCardView suggestionCard = ViewBindings.findChildViewById(rootView, id);
      if (suggestionCard == null) {
        break missingId;
      }

      id = R.id.suggestionDetailsText;
      TextView suggestionDetailsText = ViewBindings.findChildViewById(rootView, id);
      if (suggestionDetailsText == null) {
        break missingId;
      }

      id = R.id.suggestionIcon;
      ImageView suggestionIcon = ViewBindings.findChildViewById(rootView, id);
      if (suggestionIcon == null) {
        break missingId;
      }

      id = R.id.suggestionTitle;
      TextView suggestionTitle = ViewBindings.findChildViewById(rootView, id);
      if (suggestionTitle == null) {
        break missingId;
      }

      id = R.id.summaryStep1;
      TextView summaryStep1 = ViewBindings.findChildViewById(rootView, id);
      if (summaryStep1 == null) {
        break missingId;
      }

      id = R.id.summaryStep2;
      TextView summaryStep2 = ViewBindings.findChildViewById(rootView, id);
      if (summaryStep2 == null) {
        break missingId;
      }

      id = R.id.summaryStep3;
      TextView summaryStep3 = ViewBindings.findChildViewById(rootView, id);
      if (summaryStep3 == null) {
        break missingId;
      }

      id = R.id.summaryStep4;
      TextView summaryStep4 = ViewBindings.findChildViewById(rootView, id);
      if (summaryStep4 == null) {
        break missingId;
      }

      id = R.id.switchUsoEsporadico;
      MaterialSwitch switchUsoEsporadico = ViewBindings.findChildViewById(rootView, id);
      if (switchUsoEsporadico == null) {
        break missingId;
      }

      id = R.id.textViewTitle;
      TextView textViewTitle = ViewBindings.findChildViewById(rootView, id);
      if (textViewTitle == null) {
        break missingId;
      }

      id = R.id.til_anotacoes;
      TextInputLayout tilAnotacoes = ViewBindings.findChildViewById(rootView, id);
      if (tilAnotacoes == null) {
        break missingId;
      }

      id = R.id.til_classe_terapeutica;
      TextInputLayout tilClasseTerapeutica = ViewBindings.findChildViewById(rootView, id);
      if (tilClasseTerapeutica == null) {
        break missingId;
      }

      id = R.id.til_data_inicio;
      TextInputLayout tilDataInicio = ViewBindings.findChildViewById(rootView, id);
      if (tilDataInicio == null) {
        break missingId;
      }

      id = R.id.tilDataTermino;
      TextInputLayout tilDataTermino = ViewBindings.findChildViewById(rootView, id);
      if (tilDataTermino == null) {
        break missingId;
      }

      id = R.id.til_dosagem_unidade;
      TextInputLayout tilDosagemUnidade = ViewBindings.findChildViewById(rootView, id);
      if (tilDosagemUnidade == null) {
        break missingId;
      }

      id = R.id.til_dosagem_valor;
      TextInputLayout tilDosagemValor = ViewBindings.findChildViewById(rootView, id);
      if (tilDosagemValor == null) {
        break missingId;
      }

      id = R.id.til_duracao;
      TextInputLayout tilDuracao = ViewBindings.findChildViewById(rootView, id);
      if (tilDuracao == null) {
        break missingId;
      }

      id = R.id.til_duracao_unidade;
      TextInputLayout tilDuracaoUnidade = ViewBindings.findChildViewById(rootView, id);
      if (tilDuracaoUnidade == null) {
        break missingId;
      }

      id = R.id.tilFrequenciaValor;
      TextInputLayout tilFrequenciaValor = ViewBindings.findChildViewById(rootView, id);
      if (tilFrequenciaValor == null) {
        break missingId;
      }

      id = R.id.tilLoteQuantidade;
      TextInputLayout tilLoteQuantidade = ViewBindings.findChildViewById(rootView, id);
      if (tilLoteQuantidade == null) {
        break missingId;
      }

      id = R.id.tilLoteValidade;
      TextInputLayout tilLoteValidade = ViewBindings.findChildViewById(rootView, id);
      if (tilLoteValidade == null) {
        break missingId;
      }

      id = R.id.til_nivel_alerta;
      TextInputLayout tilNivelAlerta = ViewBindings.findChildViewById(rootView, id);
      if (tilNivelAlerta == null) {
        break missingId;
      }

      id = R.id.til_nome;
      TextInputLayout tilNome = ViewBindings.findChildViewById(rootView, id);
      if (tilNome == null) {
        break missingId;
      }

      id = R.id.tilNovoLocal;
      TextInputLayout tilNovoLocal = ViewBindings.findChildViewById(rootView, id);
      if (tilNovoLocal == null) {
        break missingId;
      }

      id = R.id.til_principio_ativo;
      TextInputLayout tilPrincipioAtivo = ViewBindings.findChildViewById(rootView, id);
      if (tilPrincipioAtivo == null) {
        break missingId;
      }

      return new FragmentAddMedicamentoBinding((ScrollView) rootView, autoCompleteUnidade,
          autoCompleteUnidadeDuracao, buttonAddHorario, buttonAddIntervalo, buttonAddLocal,
          buttonAddLote, buttonCancelar, buttonCopyData, buttonDismissSuggestion, buttonSalvar,
          cardStep1, cardStep2, cardStep3, cardStep4, checkboxNotificacao, chipDiariamente,
          chipDiasDaSemana, chipDom, chipGroupDiasSemana, chipGroupFrequenciaTipo,
          chipGroupHorarios, chipGroupLocais, chipIntervaloDias, chipQua, chipQui, chipSab, chipSeg,
          chipSex, chipTer, contentStep1, contentStep2, contentStep3, contentStep4, dividerLotes,
          editTextAnotacoes, editTextClasseTerapeutica, editTextDataInicio, editTextDataTermino,
          editTextDosagemValor, editTextDuracao, editTextFatorSensibilidade,
          editTextFrequenciaValor, editTextGlicemiaAlvo, editTextLoteQuantidade,
          editTextLoteValidade, editTextNivelAlerta, editTextNome, editTextNovoLocal,
          editTextPrincipioAtivo, editTextRatioCarboidrato, headerStep1, headerStep2, headerStep3,
          headerStep4, iconStep1, iconStep2, iconStep3, iconStep4, layoutDoseCalculada,
          layoutDoseFixa, layoutDuracao, layoutFrequenciaDiaria, layoutFrequenciaIntervalo,
          layoutFrequenciaSemanal, layoutLocaisAplicacao, radioDoseCalculada, radioDoseFixa,
          radioDoseManual, radioGroupTermino, radioGroupTipoDosagem, radioGroupTipoMedicamento,
          radioInjetavel, radioOral, radioTerminoContinuo, radioTerminoDataFim, radioTerminoDuracao,
          radioTopico, recyclerViewLotes, recyclerViewSearchResults, suggestionCard,
          suggestionDetailsText, suggestionIcon, suggestionTitle, summaryStep1, summaryStep2,
          summaryStep3, summaryStep4, switchUsoEsporadico, textViewTitle, tilAnotacoes,
          tilClasseTerapeutica, tilDataInicio, tilDataTermino, tilDosagemUnidade, tilDosagemValor,
          tilDuracao, tilDuracaoUnidade, tilFrequenciaValor, tilLoteQuantidade, tilLoteValidade,
          tilNivelAlerta, tilNome, tilNovoLocal, tilPrincipioAtivo);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

// Generated by view binder compiler. Do not edit!
package com.developersbeeh.medcontrol.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.developersbeeh.medcontrol.R;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DependentItemBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final ImageView imageViewArrow;

  @NonNull
  public final ImageView imageViewAvatar;

  @NonNull
  public final TextView textViewDependentName;

  @NonNull
  public final TextView textViewStatus;

  private DependentItemBinding(@NonNull MaterialCardView rootView,
      @NonNull ImageView imageViewArrow, @NonNull ImageView imageViewAvatar,
      @NonNull TextView textViewDependentName, @NonNull TextView textViewStatus) {
    this.rootView = rootView;
    this.imageViewArrow = imageViewArrow;
    this.imageViewAvatar = imageViewAvatar;
    this.textViewDependentName = textViewDependentName;
    this.textViewStatus = textViewStatus;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static DependentItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DependentItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dependent_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DependentItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.imageViewArrow;
      ImageView imageViewArrow = ViewBindings.findChildViewById(rootView, id);
      if (imageViewArrow == null) {
        break missingId;
      }

      id = R.id.imageViewAvatar;
      ImageView imageViewAvatar = ViewBindings.findChildViewById(rootView, id);
      if (imageViewAvatar == null) {
        break missingId;
      }

      id = R.id.textViewDependentName;
      TextView textViewDependentName = ViewBindings.findChildViewById(rootView, id);
      if (textViewDependentName == null) {
        break missingId;
      }

      id = R.id.textViewStatus;
      TextView textViewStatus = ViewBindings.findChildViewById(rootView, id);
      if (textViewStatus == null) {
        break missingId;
      }

      return new DependentItemBinding((MaterialCardView) rootView, imageViewArrow, imageViewAvatar,
          textViewDependentName, textViewStatus);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

// Generated by view binder compiler. Do not edit!
package com.developersbeeh.medcontrol.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.developersbeeh.medcontrol.R;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.switchmaterial.SwitchMaterial;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogPredictiveAnalysisBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Chip chip30Days;

  @NonNull
  public final Chip chip7Days;

  @NonNull
  public final Chip chipCustomRange;

  @NonNull
  public final ChipGroup chipGroupDateRange;

  @NonNull
  public final Chip chipToday;

  @NonNull
  public final ConstraintLayout contentGroup;

  @NonNull
  public final TextInputEditText editTextSymptoms;

  @NonNull
  public final ProgressBar progressBarAnalysis;

  @NonNull
  public final SwitchMaterial switchContinuousMeds;

  @NonNull
  public final SwitchMaterial switchDoseHistory;

  @NonNull
  public final SwitchMaterial switchHealthNotes;

  @NonNull
  public final TextView textViewDateRange;

  @NonNull
  public final TextView textViewDialogTitle;

  @NonNull
  public final TextView textViewIncludeLabel;

  @NonNull
  public final TextView textViewPeriodLabel;

  @NonNull
  public final TextInputLayout tilSymptoms;

  private DialogPredictiveAnalysisBinding(@NonNull ConstraintLayout rootView,
      @NonNull Chip chip30Days, @NonNull Chip chip7Days, @NonNull Chip chipCustomRange,
      @NonNull ChipGroup chipGroupDateRange, @NonNull Chip chipToday,
      @NonNull ConstraintLayout contentGroup, @NonNull TextInputEditText editTextSymptoms,
      @NonNull ProgressBar progressBarAnalysis, @NonNull SwitchMaterial switchContinuousMeds,
      @NonNull SwitchMaterial switchDoseHistory, @NonNull SwitchMaterial switchHealthNotes,
      @NonNull TextView textViewDateRange, @NonNull TextView textViewDialogTitle,
      @NonNull TextView textViewIncludeLabel, @NonNull TextView textViewPeriodLabel,
      @NonNull TextInputLayout tilSymptoms) {
    this.rootView = rootView;
    this.chip30Days = chip30Days;
    this.chip7Days = chip7Days;
    this.chipCustomRange = chipCustomRange;
    this.chipGroupDateRange = chipGroupDateRange;
    this.chipToday = chipToday;
    this.contentGroup = contentGroup;
    this.editTextSymptoms = editTextSymptoms;
    this.progressBarAnalysis = progressBarAnalysis;
    this.switchContinuousMeds = switchContinuousMeds;
    this.switchDoseHistory = switchDoseHistory;
    this.switchHealthNotes = switchHealthNotes;
    this.textViewDateRange = textViewDateRange;
    this.textViewDialogTitle = textViewDialogTitle;
    this.textViewIncludeLabel = textViewIncludeLabel;
    this.textViewPeriodLabel = textViewPeriodLabel;
    this.tilSymptoms = tilSymptoms;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogPredictiveAnalysisBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogPredictiveAnalysisBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_predictive_analysis, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogPredictiveAnalysisBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.chip30Days;
      Chip chip30Days = ViewBindings.findChildViewById(rootView, id);
      if (chip30Days == null) {
        break missingId;
      }

      id = R.id.chip7Days;
      Chip chip7Days = ViewBindings.findChildViewById(rootView, id);
      if (chip7Days == null) {
        break missingId;
      }

      id = R.id.chipCustomRange;
      Chip chipCustomRange = ViewBindings.findChildViewById(rootView, id);
      if (chipCustomRange == null) {
        break missingId;
      }

      id = R.id.chipGroupDateRange;
      ChipGroup chipGroupDateRange = ViewBindings.findChildViewById(rootView, id);
      if (chipGroupDateRange == null) {
        break missingId;
      }

      id = R.id.chipToday;
      Chip chipToday = ViewBindings.findChildViewById(rootView, id);
      if (chipToday == null) {
        break missingId;
      }

      id = R.id.contentGroup;
      ConstraintLayout contentGroup = ViewBindings.findChildViewById(rootView, id);
      if (contentGroup == null) {
        break missingId;
      }

      id = R.id.editTextSymptoms;
      TextInputEditText editTextSymptoms = ViewBindings.findChildViewById(rootView, id);
      if (editTextSymptoms == null) {
        break missingId;
      }

      id = R.id.progressBarAnalysis;
      ProgressBar progressBarAnalysis = ViewBindings.findChildViewById(rootView, id);
      if (progressBarAnalysis == null) {
        break missingId;
      }

      id = R.id.switchContinuousMeds;
      SwitchMaterial switchContinuousMeds = ViewBindings.findChildViewById(rootView, id);
      if (switchContinuousMeds == null) {
        break missingId;
      }

      id = R.id.switchDoseHistory;
      SwitchMaterial switchDoseHistory = ViewBindings.findChildViewById(rootView, id);
      if (switchDoseHistory == null) {
        break missingId;
      }

      id = R.id.switchHealthNotes;
      SwitchMaterial switchHealthNotes = ViewBindings.findChildViewById(rootView, id);
      if (switchHealthNotes == null) {
        break missingId;
      }

      id = R.id.textViewDateRange;
      TextView textViewDateRange = ViewBindings.findChildViewById(rootView, id);
      if (textViewDateRange == null) {
        break missingId;
      }

      id = R.id.textViewDialogTitle;
      TextView textViewDialogTitle = ViewBindings.findChildViewById(rootView, id);
      if (textViewDialogTitle == null) {
        break missingId;
      }

      id = R.id.textViewIncludeLabel;
      TextView textViewIncludeLabel = ViewBindings.findChildViewById(rootView, id);
      if (textViewIncludeLabel == null) {
        break missingId;
      }

      id = R.id.textViewPeriodLabel;
      TextView textViewPeriodLabel = ViewBindings.findChildViewById(rootView, id);
      if (textViewPeriodLabel == null) {
        break missingId;
      }

      id = R.id.tilSymptoms;
      TextInputLayout tilSymptoms = ViewBindings.findChildViewById(rootView, id);
      if (tilSymptoms == null) {
        break missingId;
      }

      return new DialogPredictiveAnalysisBinding((ConstraintLayout) rootView, chip30Days, chip7Days,
          chipCustomRange, chipGroupDateRange, chipToday, contentGroup, editTextSymptoms,
          progressBarAnalysis, switchContinuousMeds, switchDoseHistory, switchHealthNotes,
          textViewDateRange, textViewDialogTitle, textViewIncludeLabel, textViewPeriodLabel,
          tilSymptoms);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
